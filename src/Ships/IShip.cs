using Battleship.Utils;
using Battleship.Utils.Enums;
namespace Battleship.Ships;

/// <summary>
/// Interfaces which defines the properties and methods a ship should have
/// in a game of Battleship
/// </summary>
public interface IShip
{
    /// <summary>
    /// Length of the ship
    /// </summary>
    public int ShipLength {get;}

    /// <summary>
    /// Dictionary of the positions that ship occupies and the peg type in each position.
    /// The peg type is used to keep track of which parts of the ship has been hit
    /// and which part hasn't
    /// </summary>
    public IDictionary<Position, PegType> Positions {get;}

    /// <summary>
    /// <c>true</c> if the ship is alive,
    /// <c>false</c> if the ship has sunk
    /// </summary>
    public bool IsAlive {get;}



    /// <summary>
    /// Method to generate a list of potential positions that the ship can be placed in
    /// </summary>
    /// <param name="startCoords">Origin position</param>
    /// <param name="orientation">Orientation of the ship</param>
    /// <returns>List of potential positions</returns>
    public IEnumerable<Position> GeneratePositions(Position startCoords, ShipOrientation orientation);

    /// <summary>
    /// Method to assign the ship a position based on a single position and the ship orientation
    /// </summary>
    /// <param name="startCoords">Origin position</param>
    /// <param name="orientation">Orientation of the ship</param>
    /// <returns>Dictionary of positions and the peg type in each of the positions</returns>
    public IDictionary<Position, PegType> AssignPositions(Position startCoords, ShipOrientation orientation);

    /// <summary>
    /// Method to assign the ship to a list of locations and a specified peg type
    /// </summary>
    /// <param name="generatedPositions">A list of positions, which should have been generated by <c>GeneratePositions</c></param>
    /// <param name="peg">Peg type for each of the positions</param>
    /// <returns>Dictionary of positions and the peg type in each of the positions</returns>
    public IDictionary<Position, PegType> AssignPositions(IEnumerable<Position> generatedPositions, PegType peg = PegType.NONE);

    /// <summary>
    /// Method to get the peg type from a certain position
    /// </summary>
    /// <param name="pos">Position which is being searched on</param>
    /// <returns>
    /// The peg type on that position, 
    /// <c>PegType.NONE</c> if no peg is found
    /// </returns>
    public PegType GetPegOnPosition(Position pos);

    /// <summary>
    /// Method to set the peg type of a specified position
    /// </summary>
    /// <param name="pos">Position which is being updated</param>
    /// <param name="peg">Peg type being placed at the position</param>
    /// <returns>
    /// <c>true</c> if successful,
    /// <c>false</c> if not
    /// </returns>
    public bool SetPegOnPosition(Position pos, PegType peg);

    /// <summary>
    /// Method to sink the ship. Ship should only sink if <c>IsAlive</c> is true
    /// and all the peg types are <c>PegType.HIT</c>
    /// </summary>
    /// <returns>
    /// <c>true</c> if successful,
    /// <c>false</c> if not
    /// </returns>
    public bool SinkShip();



    /// <summary>
    /// Override default <c>ToString</c> implementation
    /// </summary>
    /// <returns>String representation of the ship</returns>
    public string? ToString();

    /// <summary>
    /// Method to clone the ships
    /// </summary>
    /// <returns>Cloned ship</returns>
    public IShip Clone();
}
