---
title: Battleship Game
---
%% Created by: Wahyu Aditya Tama

classDiagram
direction UD
IBoard --|> Board
IGrid --|> Grid
IBoard --* IGrid

IBoard --* IShip
IBoard --* PegType
IBoard --* Position
IGrid~T~ --* Position
namespace GameBoard{
    class IBoard {
        <<Interface>>
        +IGrid~IShip~ GridShip : readonly
        +IDictionary~IShip, bool~ ShipsOnBoard : readonly
        +IGrid~PegType~ GridPeg : readonly

        +PutShipOnBoard(IShip, Position, ShipOrientation) bool
        +GetShipOnBoard(Position) IShip?
        +CheckShipGridPosition(Position) bool
        +CheckShipGridPosition(IEnumerable~Position~) bool

        +IncomingAttack(Position, IAmmo) IDictionary~Position, PegType~
        +PutPegOnBoard(IDictionary~Position, PegType~) void
    }

    class Board{
        +IGrid~IShip~ GridShip get; private set;
        +IDictionary~IShip, bool~ ShipsOnBoard get; private set;
        +IGrid~PegType~ GridPeg get; private set;

        +Board(int)
        +Board(int, int)

        +PutShipOnBoard(IShip, Position, ShipOrientation) bool
        +GetShipOnBoard(Position) IShip?
        +CheckShipGridPosition(Position) bool
        +CheckShipGridPosition(IEnumerable~Position~) bool

        +IncomingAttack(Position, IAmmo) IDictionary~Position, PegType~
        -SetShipStatus(IShip, bool) void
        +PutPegOnBoard(IDictionary~Position, PegType~) void
        -PutPegOnBoard(Position, peg) void
    }

    class IGrid~T~{
        <<Interface>>
        +T[,] Pieces : readonly
        +int TotalGrid : readonly

        +PlaceItemOnGrid(Position, T) bool
        +PlaceItemOnGrid(IDictionary~Position, T~) bool
        +ContainsPosition(Position) bool
        +IsPositionEmpty(Position) bool
        +IsPositionEmpty(IEnumerable~Position~) bool
    }

    class Grid~T~{
        +T[,] Pieces get; private set;
        +int TotalGrid get; private set;

        +Grid(int)
        +Grid(int, int)

        +PlaceItemOnGrid(Position, T) bool
        +PlaceItemOnGrid(IDictionary~Position, T~) bool
        +ContainsPosition(Position) bool
        +IsPositionEmpty(Position) bool
        +IsPositionEmpty(IEnumerable~Position~) bool
    }
}



IPlayer --|> Player
PlayerBattleshipData --* IBoard
PlayerBattleshipData --* IAmmo
namespace Players {
    class IPlayer {
        <<Interface>>
        +int ID : readonly
        +string Name : readonly
    }

    class Player {
        +int ID get; private set;
        +string Name get; private set;

        +Player(string name)
        +Equals(object?) bool
        +GetHashCode() int
    }

    class PlayerBattleshipData {
        +IBoard PlayerBoard get; private set;
        +IDictionary~IAmmo, int~ Ammo get; private set;

        +PlayerBattleshipData(IBoard)
        +PlayerBattleshipData(IBoard, IDictionary~IAmmo, int~)

        +GetAmmoCount(IAmmo) int
        +GiveAmmo(IAmmo, int) bool
        +RemoveAmmo(IAmmo, int) bool
    }
}



namespace Utils {
    class Position {
        <<Struct>>
        +int X : readonly
        +int Y : readonly
        +Position(int, int)

        +ToString() string
    }

    class GameStatus {
        <<Enumeration>>
        INIT,
        ONGOING,
        ENDED
    }

    class PegType{
        <<Enumeration>>
        NONE,
        HIT,
        MISS
    }

    class ShipOrientation{
        <<Enumeration>>
        VERTICAL,
        HORIZONTAL
    }
}



IShip --|> Ship
Ship --|> ShipBattleship
Ship --|> ShipBlank
Ship --|> ShipCarrier
Ship --|> ShipCruiser
Ship --|> ShipDestroyer
Ship --|> ShipSubmarine

IShip --* Position
IShip --* PegType
IShip --* ShipOrientation
namespace Ships {
    class IShip {
        <<Interface>>
        +int ShipLength : readonly 
        +IDictionary ~Position, PegType~ position : readonly
        +bool IsAlive

        +AssignPositions(Position, ShipOrientation) IDictionary~Position, PegType~
        +AssignPositions(IEnumerable~Position~, PegType = NONE) IDictionary~Position, PegType~
        +GeneratePositions(Position, ShipOrientation) IEnumerable~Position~
        +SinkShip() bool

        +ToString() string
        +Clone() IShip
    }

    class Ship {
        <<Abstract>>
        +virtual int ShipLength get; protected set;
        +virtual IDictionary ~Position, PegType~ position get; protected set;
        +virtual bool IsAlive get; protected set; = true

        +virtual AssignPositions(Position, ShipOrientation) IDictionary~Position, PegType~
        +virtual AssignPositions(IEnumerable~Position~, PegType = NONE) IDictionary~Position, PegType~
        +virtual GeneratePositions(Position, ShipOrientation) IEnumerable~Position~
        +virtual SinkShip() bool
        +Clone() IShip*
    }

    class ShipBattleship {
        +int ShipLength get; protected set; = 4
        +IDictionary ~Position, PegType~ position get; protected set;
        +bool IsAlive get; protected set; = true

        +ToString() string
        +Clone() IShip

        +Equals(object?) bool
        +GetHashCode() int
    }

    class ShipBlank {
        +int ShipLength get; protected set; = 1
        +IDictionary ~Position, PegType~ position get; protected set;
        +bool IsAlive get; protected set; = true

        +ToString() string
        +Clone() IShip

        +Equals(object?) bool
        +GetHashCode() int
    }

    class ShipCarrier {
        +int ShipLength get; protected set; = 5
        +IDictionary ~Position, PegType~ position get; protected set;
        +bool IsAlive get; protected set; = true

        +ToString() string
        +Clone() IShip

        +Equals(object?) bool
        +GetHashCode() int
    }

    class ShipCruiser {
        +int ShipLength get; protected set; = 3
        +IDictionary ~Position, PegType~ position get; protected set;
        +bool IsAlive get; protected set; = true

        +ToString() string
        +Clone() IShip

        +Equals(object?) bool
        +GetHashCode() int
    }

    class ShipDestroyer {
        +int ShipLength get; protected set; = 2
        +IDictionary ~Position, PegType~ position get; protected set;
        +bool IsAlive get; protected set; = true

        +ToString() string
        +Clone() IShip

        +Equals(object?) bool
        +GetHashCode() int
    }

    class ShipSubmarine {
        +int ShipLength get; protected set; = 3
        +IDictionary ~Position, PegType~ position get; protected set;
        +bool IsAlive get; protected set; = true

        +ToString() string
        +Clone() IShip

        +Equals(object?) bool
        +GetHashCode() int
    }

}



IAmmo --|> MissileBarrage
IAmmo --|> MissileSingle
IAmmo --|> MissileNuclear
IAmmo --* Position
namespace Ammo {
    class IAmmo {
        <<Interface>>
        +Shoot(Position origin) IEnumerable~Position~

        +ToString() string
        +Equals() bool
        +GetHashCode() int
    }

    class MissileBarrage{
        +Shoot(Position position) IEnumerable~Position~
    }

    class MissileSingle{
        +Shoot(Position position) IEnumerable~Position~
    }

    class MissileNuclear{
        +Shoot(Position position) IEnumerable~Position~
    }
}



GameController --* IBoard
GameController --* IShip
GameController --* IAmmo
GameController --* IPlayer
GameController --* PlayerBattleshipData
GameController --* GameStatus
GameController --* ShipOrientation
class GameController{
    -IBoard _templateBoard
    -List~IShip~ _templateShips
    -Dictionary~IAmmo, int~ _templateAmmo
    -Dictionary~IPlayer, PlayerBattleshipData~ _playersData
    -Queue~IPlayer~ _activePlayer
    +GameStatus Status
    -ILogger~GameController~? _log
   
    +GameController(IPlayer, IPlayer, IBoard, IEnumerable~IShip~, IDictionary~IAmmo, int~? = null, ILogger~GameController~? = null)
    
    +StartGame(out string) GameStatus
    +NextTurn(out string) GameStatus
    +ResetGame(out string) GameStatus
    +ResetGame(IBoard? = null, IEnumerable~IShip~? = null, IDictionary~IAmmo, int~? = null, out string) GameStatus
    
    +PlayerPlaceShip(IPlayer, IShip, Position, ShipOrientation, out string) bool
    +PlayerShoot(IPlayer, IPlayer, Position, IAmmo, out string) bool
    +GivePlayerAdditionalAmmo(IAmmo, int) void
    
    
    +GetPlayers() IEnumerable~IPlayer~
    +GetCurrentActivePlayer() IPlayer
    +PreviewNextPlayer() IPlayer
    +GetPlayerTurn() IPlayer[]
    +GetPlayerData(IPlayer, out string) PlayerBattleshipData?
    +GetPlayerBoard(IPlayer, out string) IBoard?
    +GetPlayerGridShip(IPlayer, out string) IGrid~IShip~?
    +GetPlayerGridPeg(IPlayer, out string) IGrid~PegType~?
    +GetPlayerShipsStatus(IPlayer, out string) IDictionary~IShip, bool~?
    +GetPlayerShipsAll(IPlayer, out string) IEnumerable~IShip~?
    +GetPlayerShipsLive(IPlayer, out string) IEnumerable~IShip~?
    +GetPlayerShipsSunk(IPlayer, out string) IEnumerable~IShip~?
    +GetPlayerAmmoStock(IPlayer, out string) IDictionary~IAmmo, int~?
    +GetPlayerAmmoCount(IPlayer, IAmmo, out string) int?
}
